/**
\page plugin_plot Plot Data Plugin

With a PlotData plugin a new plot field can be defined for the xplt plot file. This allows users to customize the output generated by FEBio in an easy manner.

Data can be stored in the plot file using several data formats and storage formats. The data format refers to the type of data that is being stored. 
The following values are allowed:

\li <b>PLT_FLOAT</b>: single floating point (s.f.p.) number
\li <b>PLT_VEC3F</b>: three s.f.p. numbers representing a 3D vector
\li <b>PLT_MAT3FS</b>: six s.f.p. numbers representing a 3D second order symmetric matrix (order is xx, yy, zz, xy, yz, xz).
\li <b>PLT_MAT3FD</b>: three s.f.p. numbers representing a 3D diagonal matrix (order is xx, yy, zz)
\li <b>PLT_MAT3F</b>: nine s.f.p. numbers representing a 3D matrix (order is xx, xy, xz, yx, yy, yz, zx, zy, zz)

The storage format defines who many data items are stored.

\li <b>FMT_NODE</b>: one value for each node
\li <b>FMT_ITEM</b>: one value for each item (i.e. element or facet)
\li <b>FMT_MULT</b>: one value for each node of each item.

Note that for nodal data the storage format makes no difference and all formats results in a single value per node. 

There are three classes of plot data currently defined: Nodal plot data, element plot data, and surface facet plot data. 

\section node_data Nodal Plot Data
To create a nodal plot data field, derive a new class from FENodeData and implement the \c Save member function. Note that the constructor of the FENodeData class
requires the data format and storage format. For nodal data the storage format is irrelevant since for nodal data one value per node is expected.

\code
class MyNodeData : public FENodeData
{
public:
	MyNodeData(FEModel* pfem) : FENodeData(PLT_FLOAT, FMT_NODE){}
	bool Save(FEMesh& m, FEDataStream& a);
};
\endcode

The \c Save function takes the \c FEMesh as a parameter and FEDataStream reference.

\code
bool MyNodeData::Save(FEMesh& m, FEDataStream& a)
{
	int N = m.Nodes();
	for (int i=0; i<N; ++i)
	{
		double f;
		\\ calculate something for f
		a << f;
	}
	return true;
}
\endcode

\section elem_data Element Plot Data
To create a plot field for element data, create a new class from FEDomainData.

\code
class MyElementData : public FEDomainData
{
public:
	MyElementData(FEModel* pfem) : FEDomainData(PLT_FLOAT, FMT_ITEM){}
	bool Save(FEDomain& dom, FEDataStream& a);
};
\endcode

The \c Save member function takes the FEDomain class and a FEDataStream as parameters. The domain references the current domain for which data is being stored. 
A cast may be necessary to convert the FEDomain base class to the correct domain class. 

\code
class MyElementData::Save(FEDomain& dom, FEDataStream& a)
{
	int NE = dom.Elements();
	for (int i=0; i<NE; ++i)
	{
		FEElement& el = dom.ElementRef(i);
		
		double f;
		\\ calculate something for f
		a << f;
	}
	
	return true;
}
\endcode 

\section face_data Facet Plot Data
To create a surface facet plot field, create a new class from FESurfaceData.

\code
class MySurfaceData : public FESurfaceData
{
public:
	MySurfaceData(FEModel* pfem) : FESurfaceData(PLT_FLOAT, FMT_ITEM){}
	bool Save(FESurface& s, FEDataStream& a);
};
\endcode

The \c Save member function takes the FESurface class and a FEDataStream as parameters. The FESurface references the current surface for which data is being stored. 

\code
class MySurfaceData::Save(FESurface& s, FEDataStream& a)
{
	int NE = s.Elements();
	for (int i=0; i<NE; ++i)
	{
		FESurfaceElement& el = s.Element(i);
		
		double f;
		\\ calculate something for f
		a << f;
	}
	
	return true;
}
\endcode 
*/
